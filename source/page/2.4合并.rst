.. final term documentation master file, created by
   sphinx-quickstart on Wed Jun  3 23:09:49 2020.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.




2.4 合并
==================================

pandas通过各种索引设置逻辑和关系代数功能，为连接/合并Series、DataFrame、Panel提供了各种方法。

1. Concat
________________________
利用 concat()连接pandas对象::

 df = pd.DataFrame(np.random.randn(10, 4))
 
 df
          0         1         2         3
 0 -0.548702  1.467327 -1.015962 -0.483075
 1  1.637550 -1.217659 -0.291519 -1.745505
 2 -0.263952  0.991460 -0.919069  0.266046
 3 -0.709661  1.669052  1.037882 -1.705775
 4 -0.919854 -0.042379  1.247642 -0.009920
 5  0.290213  0.495767  0.362949  1.548106
 6 -1.131345 -0.089329  0.337863 -0.945867
 7 -0.932132  1.956030  0.017587 -0.016692
 8 -0.575247  0.254161 -1.143704  0.215897
 9  1.193555 -0.077118 -0.408530 -0.862495

 # 切片
 pieces = [df[:3], df[3:7], df[7:]]

 pd.concat(pieces)
          0         1         2         3
 0 -0.548702  1.467327 -1.015962 -0.483075
 1  1.637550 -1.217659 -0.291519 -1.745505
 2 -0.263952  0.991460 -0.919069  0.266046
 3 -0.709661  1.669052  1.037882 -1.705775
 4 -0.919854 -0.042379  1.247642 -0.009920
 5  0.290213  0.495767  0.362949  1.548106
 6 -1.131345 -0.089329  0.337863 -0.945867
 7 -0.932132  1.956030  0.017587 -0.016692
 8 -0.575247  0.254161 -1.143704  0.215897
 9  1.193555 -0.077118 -0.408530 -0.862495

2. Join
__________________________________
类似于SQL的合并（数据库风格）::

 left = pd.DataFrame({'key': ['foo', 'foo'], 'lval': [1, 2]})
 right = pd.DataFrame({'key': ['foo', 'foo'], 'rval': [4, 5]})

 left
   key  lval
 0  foo     1
 1  foo     2

 right
   key  rval
 0  foo     4
 1  foo     5

 pd.merge(left, right, on='key')    #根据'key'列进行合并
    key  lval  rval
 0  foo     1     4
 1  foo     1     5
 2  foo     2     4
 3  foo     2     5

3.Append（追加）
______________________________
添加一行到DataFrame上::
 
 df = pd.DataFrame(np.random.randn(8, 4), columns=['A','B','C','D'])
 df
          A         B         C         D
 0  1.346061  1.511763  1.627081 -0.990582
 1 -0.441652  1.211526  0.268520  0.024580
 2 -1.577585  0.396823 -0.105381 -0.532532
 3  1.453749  1.208843 -0.080952 -0.264610
 4 -0.727965 -0.589346  0.339969 -0.693205
 5 -0.339355  0.593616  0.884345  1.591431
 6  0.141809  0.220390  0.435589  0.192451
 7 -0.096701  0.803351  1.715071 -0.708758

 s = df.iloc[3]
 df.append(s, ignore_index=True) #ignore_index = True无视原有index索引，重新整理新的index
          A         B         C         D
 0  1.346061  1.511763  1.627081 -0.990582
 1 -0.441652  1.211526  0.268520  0.024580
 2 -1.577585  0.396823 -0.105381 -0.532532
 3  1.453749  1.208843 -0.080952 -0.264610
 4 -0.727965 -0.589346  0.339969 -0.693205
 5 -0.339355  0.593616  0.884345  1.591431
 6  0.141809  0.220390  0.435589  0.192451
 7 -0.096701  0.803351  1.715071 -0.708758
 8  1.453749  1.208843 -0.080952 -0.264610

4.Merge
_____________________________________
pandas库中自带一个合并函数，功能强大::

 pd.merge(left, right, how='inner', on=None, left_on=None, right_on=None,
         left_index=False, right_index=False, sort=True,
         suffixes=('_x', '_y'), copy=True, indicator=False,
         validate=None)

参数如下：

* left: 拼接的左侧DataFrame对象
* right: 拼接的右侧DataFrame对象
* on: 要加入的列或索引级别名称。 必须在左侧和右侧DataFrame对象中找到。 如果未传递且left_index和right_index为False，则DataFrame中的列的交集将被推断为连接键。
* left_on:左侧DataFrame中的列或索引级别用作键。 可以是列名，索引级名称，也可以是长度等于DataFrame长度的数组。
* right_on: 左侧DataFrame中的列或索引级别用作键。 可以是列名，索引级名称，也可以是长度等于DataFrame长度的数组。
* left_index: 如果为True，则使用左侧DataFrame中的索引（行标签）作为其连接键。 对于具有MultiIndex（分层）的DataFrame，级别数必须与右侧DataFrame中的连接键数相匹配。
* right_index: 与left_index功能相似。
* how: One of ‘left’, ‘right’, ‘outer’, ‘inner’. 默认inner。inner是取交集，outer取并集。比如left：[‘A’,‘B’,‘C’];right[’'A,‘C’,‘D’]；inner取交集的话，left中出现的A会和right中出现的买一个A进行匹配拼接，如果没有是B，在right中没有匹配到，则会丢失。'outer’取并集，出现的A会进行一一匹配，没有同时出现的会将缺失的部分添加缺失值。
* sort: 按字典顺序通过连接键对结果DataFrame进行排序。 默认为True，设置为False将在很多情况下显着提高性能。
* suffixes: 用于重叠列的字符串后缀元组。 默认为（‘x’，’ y’）。
* copy: 始终从传递的DataFrame对象复制数据（默认为True），即使不需要重建索引也是如此。
* indicator:将一列添加到名为_merge的输出DataFrame，其中包含有关每行源的信息。 _merge是分类类型，并且对于其合并键仅出现在“左”DataFrame中的观察值，取得值为left_only，对于其合并键仅出现在“右”DataFrame中的观察值为right_only，并且如果在两者中都找到观察点的合并键，则为left_only。

实例::
 
 import pandas as pd
 left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],
                       'A': ['A0', 'A1', 'A2', 'A3'],
                       'B': ['B0', 'B1', 'B2', 'B3']})
 right = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],
                        'C': ['C0', 'C1', 'C2', 'C3'],
                        'D': ['D0', 'D1', 'D2', 'D3']})
 result = pd.merge(left, right, on='key')

 # on参数传递的key作为连接键
 result

    A   B key   C   D
 0  A0  B0  K0  C0  D0
 1  A1  B1  K1  C1  D1
 2  A2  B2  K2  C2  D2
 3  A3  B3  K3  C3  D3










